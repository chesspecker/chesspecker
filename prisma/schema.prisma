generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Puzzle {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lichessId        String   @unique
  fen              String
  moves            String[]
  rating           Int
  ratingDeviation  Int
  popularity       Int
  nbPlays          Int
  themes           Theme[]
  gameUrl          String
  openingFamily    String?
  openingVariation String?

  @@index([lichessId])
}

model Theme {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String   @unique
  puzzles Puzzle[]

  PuzzleItem   PuzzleItem? @relation(fields: [puzzleItemId], references: [id])
  puzzleItemId String?

  themeItems ThemeItem[]
}

model ThemeItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String @unique
  count Int    @default(0)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  theme   Theme?  @relation(fields: [themeId], references: [id])
  themeId String?
}

model Streak {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  currentCount  Int      @default(0)
  lastLoginDate DateTime @default(now())
  startDate     DateTime @default(now())

  user User?
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lichessId String  @unique
  stripeId  String? @unique
  username  String
  isSponsor Boolean @default(false)

  totalPuzzleSolved Int @default(0)
  totalSetCompleted Int @default(0)
  totalTimePlayed   Int @default(0)

  streak   Streak @relation(fields: [streakId], references: [id])
  streakId String @unique

  puzzleSets               PuzzleSet[]
  validatedAchievements    AchievementItem[]
  puzzleSolvedByCategories ThemeItem[]
}

model PuzzleSet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  puzzles          PuzzleItem[]
  title            String
  length           Int
  cycles           Int          @default(0)
  spacedRepetition Boolean      @default(false)
  currentTime      Int          @default(0)
  times            Float[]
  rating           Int
  progress         Int          @default(0)
  level            Difficulty
}

enum Difficulty {
  easiest
  easier
  intermediate
  harder
  hardest
}

model PuzzleItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lichessId String

  puzzleSet   PuzzleSet @relation(fields: [puzzleSetId], references: [id])
  puzzleSetId String

  played    Boolean
  count     Int
  streak    Int
  order     Int
  mistakes  Int[]
  timeTaken Float[]
  grades    Int[]
  themes    Theme[]
}

model AchievementItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  claimed Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
